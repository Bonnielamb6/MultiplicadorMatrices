/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package front;

import back.InterfazRemota;
import back.MatrizParalela;
import back.concurrente;
import back.Cliente;
import java.io.File;
import java.io.FileNotFoundException;
import java.rmi.Naming;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Scanner;

/**
 *
 * @author PC
 */
public class InterfazCliente extends javax.swing.JFrame {

    int filaInicio;
    int filaFinal;
    int cantidadFilas;
   // Cliente cliente = new Cliente();
    
    /**
     * Creates new form InterfazCliente
     */
    public InterfazCliente() {
        initComponents();
        
     //   cliente.conectarConServidor();
    }

    public void conectarConServidor() {
        concurrente objConcurrente = new concurrente(1000, 1000, 1000, 1000, 10);
        filaInicio = 500;
        filaFinal = 700;
        int matriz1[][] = leerMatrizDesdeArchivo("matriz1.txt");
        int matriz2[][] = leerMatrizDesdeArchivo("matriz2.txt");

        objConcurrente.setMatriz1(matriz1);
        objConcurrente.setMatriz2(matriz2);

        objConcurrente.setCantidadHilos(2);
        objConcurrente.setSaltos(10);
        objConcurrente.setInicio(filaInicio);
        objConcurrente.setFilaFinal(filaFinal);

        try {

            objConcurrente.correrHilos();
            //imprimirMatriz(matriz1);
            //System.out.println("matriz2");
            //imprimirMatriz(matriz2);
            //System.out.println("resultado");
            //imprimirMatriz(objConcurrente.getMatrizResultado());
            //imprimirMatriz(objConcurrente.getMatrizResultado());
            Registry registry = LocateRegistry.createRegistry(
                    Integer.parseInt("9999"));

            InterfazRemota mir
                    = (MatrizParalela) Naming.lookup("//"
                            + "192.168.100.5:9999/Matrices");
            mir.meterDatos(filaInicio,filaFinal, 0, objConcurrente.getMatrizResultado());
        } catch (Exception e) {
            System.out.println("Error al correr hilos" + e);
        }
    }

    private static int[][] leerMatrizDesdeArchivo(String rutaArchivo) {
        int[][] matriz = null;

        try {
            File archivo = new File(rutaArchivo);
            Scanner scanner = new Scanner(archivo);

            // Determinar el tamaño de la matriz (asumiendo que el archivo contiene filas y columnas en la primera línea)
            int filas = scanner.nextInt();
            int columnas = scanner.nextInt();
            matriz = new int[filas][columnas];

            // Leer los elementos de la matriz desde el archivo
            for (int i = 0; i < filas; i++) {
                for (int j = 0; j < columnas; j++) {
                    matriz[i][j] = scanner.nextInt();
                }
            }

            // Cerrar el scanner
            scanner.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        return matriz;
    }

    // Método para imprimir una matriz (solo para verificar)
    private static void imprimirMatriz(int[][] matriz) {
        if (matriz != null) {
            for (int i = 0; i < matriz.length; i++) {
                for (int j = 0; j < matriz[i].length; j++) {
                    System.out.print(matriz[i][j] + " ");
                }
                System.out.println();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
